# 装饰器

在代码运行期间动态增加功能的方式，本质上是一个返回函数的高阶函数。

### 作用：装饰器让你在一个函数的前后去执行代码。

所以被装饰的函数要作为参数传递给装饰器。

例子：

```python
def a_new_decorator(a_func):
	def wrapTheFunction():
		print("I am doing some boring work before executing a_func()")
		a_func()
		print("I am doing some boring work after executing a_func()")
	return wrapTheFunction

def a_function_requiring_decoration():
	print("I am the function which needs")

a_function_requiring_decoration()

# Outputs:
# I am the function which needs

a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)
a_function_requiring_decoration()

# Outputs:
# I am doing some boring work before executing a_func()
# I am the function which needs
# I am doing some boring work after executing a_func()
```

装饰器封装了一个函数来修改它的行为。
使用Python语法糖来改写：

```python
@a_new_decorator
def a_function_requiring_decoration():
    """
    Hey you! Decorate me!
    """
    print("I am the function which needs some decoration to remove my foul smell")

a_function_requiring_decoration()

# Outputs:
# I am doing some boring work before executing a_func()
# I am the function which needs some decoration to remove my foul smell
# I am doing some boring work after executing a_func()
```

也就是说，在函数前使用@符号等价于

```python
a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)
```

如果运行如下代码会存在一个问题：

```python
print(a_function_requiring_decoration.__name__)

# Outputs: wrapTheFunction
```

函数的名字和注释文档被重写了，所以要使用functools.wraps来解决这个问题。

例子：

```python
from functools import wraps

def a_new_decorator(a_func):
    @wraps(a_func)
    def wrapTheFunction():
        print("I am doing some boring work before executing a_func()")
        a_func()
        print("I am doing some boring work after executing a_func()")
    return wrapTheFunction

@a_new_decorator
def a_function_requiring_decoration():
    """
    Hey you! Decorate me!
    """
    print("I am the function which needs some decoration to remove my foul smell")

print(a_function_requiring_decoration.__name__)

# Outputs: a_function_requiring_decoration
```

### 装饰器蓝本规范

```python
from functools import wraps

def decorator_name(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        if not can_run:
            return "Function will not run"
        return f(*args, **kwargs)
    return decorated

@decorator_name
def func():
    return("Function is running")

can_run = True
print(func())

# Outputs: Function is running

can_run = False
print(func())

# Outputs: Function will not run
```

注意：@wraps接受一个函数来进行装饰， 并加入了复制函数名称、注释文档、参数列表等功能。可以让我们在装饰器里面访问装饰之前的函数的属性。

### 使用场景

* **授权（Authorization)**

装饰器有助于检查某个人是否被授权去使用一个web应用的端点（endpoint）。它们被大量使用于Flask和Django框架中。

使用基于装饰器的授权的例子：

```python
from functools import wraps

def requires_auth(f):
    @wraps
    def decorated(*args, **kwargs):
        auth = request.authorization
        if not auth or not check_auth(auth.username, auth.password):
            authenticate()
        return f(*args, **kwargs)
    return decorated
```

* **日志（Logging)**

例子：

```python
from functools import wraps

def logit(func):
    @wraps(func)
    def with_logging(*args, **kwargs):
        print(func.__name__ + " was called")
        return func(*args, **kwargs)
    return with_logging

@logit
def addition_func(x):
    """
    Do some math.
    """
    return x + x

result = addition_func(4)

# Outputs: addition_func was called
```

### 带参数的装饰器

#### 在函数中嵌入装饰器

如果装饰器本身需要传入参数，那就需要编写一个返回装饰器的高阶函数。

还是日志的例子，并创建一个包裹函数，能让我们指定一个用于输出的日志文件。

```python
from functools import wraps

def logit(logfile='out.log'):
    def logging_decorator(func):
        @wraps(func)
        def wrapped_function(*args, **kwargs):
            log_string = func.__name__ + " was called"
            # 打开logfile，并写入内容
            with open(logfile, 'a') as opened_file:
                # 现在将日志打到指定的logfile
                opened_file.write(log_string + '\n')
            return func(*args, **kwargs)
        return wrapped_function
    return logging_decorator

@logit()
def myfunc1():
    pass

myfunc1()

# Outputs: myfunc1 was called
# 现在一个叫out.log的文件出现了，内容就是上面的字符串

@logit(logfile='func2.log')
def myfunc2():
    pass

myfunc2()

# Outputs: myfunc2 was called
# 现在一个叫func2.log的文件出现了，内容就是上面的字符串
```

在函数前使用@符号等价于

```python
myfunc1 = logit('out.log')(myfunc1)
myfunc2 = logit('func2.log')(myfunc2)
```

### 装饰器类

类也可以用来构建装饰器。

下面的代码以一个类而不是一个函数的方式，来重新构建logit。

```python
from functools import wraps

class logit(object):
    def __init__(self, logfile='out.log'):
        self.logfile = logfile

    def __call__(self, func):
        @wraps(func)
        def wrapped_function(*args, **kwargs):
            log_string = func.__name__ + " was called"
            print(log_string)
            # 打开logfile并写入
            with open(logfile, 'a') as opened_file:
                # 现在将日志打到指定的文件
                opened_file.write(log_string + '\n')
            # 现在，发送一个通知
            self.notify()
            return func(*args, **kwargs)
        return wrapped_function

    def notify():
        # logit只打日志，不做别的
        pass
```

优势：比嵌套函数的方式更加整洁，并且包裹一个函数的语法不变。

```python
@logit()
def myfunc1():
    pass
```

现在给logit创建子类，来添加email的功能。

```python
class email_logit(logit):
    '''
    一个logit的实现版本，可以在函数调用时发送email给管理员
    '''
    def __init__(self, email='admin@myproject.com', *args, **kwargs):
        self.email = email
        super(logit, self).__init__(*args, **kwargs)

    def notify(self):
        # 发送一封email到self.email
        # 这里就不做实现了
        pass
```